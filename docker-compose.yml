# =====================================================
# Docker Compose 开发环境配置
# =====================================================
# 
# 使用方法:
# 1. 启动: docker-compose up -d --build
# 2. 查看日志: docker-compose logs -f
# 3. 停止: docker-compose down
# 4. 数据库迁移: docker-compose exec backend python manage.py migrate
version: '3.8'

services:
  # 后端 Django 服务
  backend:
    build: ./backend
    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - ./backend:/app  # 将本地代码挂载到容器，方便开发时热更新
    ports:
      - "8000:8000"
    environment:
      # Django 配置
      - SECRET_KEY=${SECRET_KEY:-django-insecure-dev-key}
      - DEBUG=${DEBUG:-True}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-*}
      
      # CORS 配置（开发环境使用默认值）
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS:-}
      
      # 数据库配置
      - DB_HOST=db
      - DB_NAME=${DB_NAME:-imagedb}
      - DB_USER=${DB_USER:-user}
      - DB_PASS=${DB_PASS:-password}
      
      # AI 配置
      - GEMINI_API_KEY=${GEMINI_API_KEY:-}
    depends_on:
      - db  # 确保先启动数据库服务
    networks:
      - app-network

  # 前端 React 服务 (使用 Nginx 托管)
  frontend:
    build:
      context: ./frontend
      args:
        - VITE_API_URL=${VITE_API_URL:-http://localhost:8000/api}
    ports:
      - "80:80"  # 将本机的 80 端口映射到容器的 80 端口
    depends_on:
      - backend
    networks:
      - app-network

  # 数据库 MySQL 服务
  db:
    image: mysql:8.0
    volumes:
      - mysql_data:/var/lib/mysql  # 数据持久化
    environment:
      - MYSQL_DATABASE=${DB_NAME:-imagedb}
      - MYSQL_USER=${DB_USER:-user}
      - MYSQL_PASSWORD=${DB_PASS:-password}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-rootpassword}
    ports:
      - "3306:3306"
    networks:
      - app-network

volumes:
  mysql_data:  # 定义一个 volume 来持久化数据库数据

networks:
  app-network:
    driver: bridge