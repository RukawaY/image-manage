# =====================================================
# Docker Compose 生产环境配置
# =====================================================
# 
# 使用方法:
# 1. 复制 env.example 为 .env 并修改配置
# 2. 启动: docker-compose -f docker-compose.prod.yml up -d --build
# 3. 查看日志: docker-compose -f docker-compose.prod.yml logs -f
# 4. 停止: docker-compose -f docker-compose.prod.yml down
# 5. 数据库迁移: docker-compose -f docker-compose.prod.yml exec backend python manage.py migrate

services:
  # 后端 Django 服务
  backend:
    build: ./backend
    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 4
    volumes:
      - ./backend/media:/app/media  # 只挂载媒体文件目录（生产环境不挂载代码）
      - ./backend/staticfiles:/app/staticfiles  # 静态文件目录
    ports:
      - "${BACKEND_PORT:-8000}:8000"  # 使用环境变量或默认8000端口
    environment:
      # Django 配置
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG:-False}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      
      # CORS 配置
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS}
      
      # 数据库配置
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      
      # AI 配置
      - GEMINI_API_KEY=${GEMINI_API_KEY}

      # 代理
      - http_proxy=${http_proxy}
      - https_proxy=${https_proxy}
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  # 前端 React 服务 (使用 Nginx 托管)
  frontend:
    build:
      context: ./frontend
      args:
        - VITE_API_URL=${VITE_API_URL}  # 构建时传入API地址
    ports:
      - "${FRONTEND_PORT:-80}:80"  # 使用环境变量或默认80端口
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - app-network

  # 数据库 MySQL 服务
  db:
    image: mysql:8.0
    volumes:
      - mysql_data:/var/lib/mysql  # 数据持久化
    environment:
      - MYSQL_DATABASE=${DB_NAME}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASS}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    ports:
      - "${DB_PORT:-3306}:3306"  # 使用环境变量或默认3306端口
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

volumes:
  mysql_data:  # 定义一个 volume 来持久化数据库数据

networks:
  app-network:
    driver: bridge

